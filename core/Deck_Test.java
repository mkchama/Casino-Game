package core;

import java.util.ArrayList;
import java.util.Collections;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Junit tests for Deck class
 */

public class Deck_Test {

	/**
	 * Tests that the correct number of decks are generated by createDeck(),
	 * and tests the last card is the correct suit and rank
	 */
	@Test
	public void test_createDeck_EndCards() {

		Deck deckTest = new Deck();

		boolean noMoreCards = false;

		deckTest.createDeck(3);

		//There should be no more than 3*52 cards
		try
		{
		 	deckTest.getCard(3*52);
		}
		catch(IndexOutOfBoundsException iobe)
		{
			noMoreCards = true;
		}

		assertEquals(Card.Rank.Ace, deckTest.getCard(3*52-1).getRank());
		assertEquals(Card.Suit.Spades, deckTest.getCard(3*52-1).getSuit());
		assertTrue(noMoreCards);
	}

    /**
     * Tests that deck is empty and Hand.cardCount is 0 after clearing deck
     */
	@Test
	public void test_clearDeck() {

		Deck deckTest = new Deck();

		boolean noCards = false;

		Hand.cardCount = 20;	

		deckTest.createDeck(1);
		deckTest.clearDeck();

        // Exception should be thrown by trying to access a non-existent 
        // card (out of bounds of list)
		try
		{
		 	deckTest.getCard(0);
		}
		catch(IndexOutOfBoundsException iobe)
		{
			noCards = true;
		}

		assertEquals(0, Hand.cardCount);
		assertTrue(noCards);
	}

    /**
     * Tests shuffleDeck() by looking for out-of-order cards compared to
     * a sorted/default deck
     */
	@Test
	public void test_shuffleDeck() {

		int differentOrder = 0;

		ArrayList<Card> deck = new ArrayList<Card>();

		for (Card.Suit suitName : Card.Suit.values()) {
            for (Card.Rank rankName : Card.Rank.values()) {
                deck.add(new Card(suitName, rankName));
            }
        }

		Deck deckTest = new Deck();
		deckTest.createDeck(1);
		deckTest.shuffleDeck();


		// Counting that some card orders are different to normal
		for(int i = 0; i < 52; i++)
		{
			if (!deck.get(i).equals(deckTest.getCard(i)))
			{
				differentOrder++;
			} 
		}

		// Tests that at least 5 cards are out of order (very low probability of 
		// full shuffle with almost all cards in order)
		assertTrue(differentOrder >= 5); 
	}

    /**
     * Tests toString() method by constructing string for comparison
     */
	@Test
	public void test_toString() {

		Deck deckTest = new Deck();
		deckTest.createDeck(1);	

		String cards = "";

		for(int i = 0; i < 52; i++)
		{
			cards += "\n" + deckTest.getCard(i);
		}

		String testCards = deckTest.toString();

		assertEquals(testCards, cards);


	}

}